{"version":3,"sources":["AppNav.js","Category.js","Home.js","Expenses.js","App.js","serviceWorker.js","index.js"],"names":["AppNav","state","Navbar","style","justifyContent","anItligems","color","dark","expand","NavbarBrand","href","Nav","navbar","NavItem","NavLink","Component","Category","isLoading","Categories","fetch","response","json","body","this","setState","map","category","Home","Expenses","props","emptyItem","description","expensedate","Date","id","location","name","categories","date","item","handleSubmit","bind","handleChange","handleDateChange","event","target","value","console","log","method","headers","JSON","stringify","preventDefault","history","push","then","updatedExpenses","filter","i","responseExp","bodyExp","title","optionList","rows","expense","key","format","Button","size","onClick","remove","Container","Form","onSubmit","FormGroup","Label","for","Input","type","onChange","autoComplete","selected","className","tag","Link","to","Table","width","App","path","exact","component","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c4021164.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport {Nav,Navbar,NavLink,NavItem,NavbarBrand} from 'reactstrap';\nclass AppNav extends Component {\n    state = {  }\n    render() { \n        return (\n            <div>\n              <Navbar style={{justifyContent:\"right\",anItligems: \"right\"}} color=\"dark\" dark expand=\"md\">\n                <NavbarBrand href=\"/\">Goal Setting Web Application</NavbarBrand>\n                  <Nav navbar>\n                      <NavItem>\n                      <NavLink href=\"/\">Home</NavLink>\n                    </NavItem>\n                    <NavItem>\n                      <NavLink href=\"/categories\">Categories</NavLink>\n                    </NavItem>\n                    <NavItem>\n                      <NavLink href=\"/expenses\">Expenses</NavLink>\n                    </NavItem>\n                  </Nav>\n              </Navbar>\n            </div>\n          );\n    }\n}\n \nexport default AppNav;","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nclass Category extends Component {\n  state = { \n    isLoading:true, // one you load componenet i have no categories and my page is still loading because i havent fetched any data yet\n    Categories : []\n   }\n\n   //goal here is to call our java spring boot application\n   //synchronous - send request and wait for response\n   //asynchrnous - send a request and you dont have to wait\n   async componentDidMount(){\n      const response = await fetch(\"/api/categories\")\n      const body = await response.json();\n      this.setState({Categories:body,isLoading:false})\n   }\n\n  render() { \n    const {Categories,isLoading} = this.state;\n    if (isLoading)\n      return(<div>loading...</div>)\n    return ( \n        <div>\n          <AppNav/>\n            <h2>Categories</h2>\n            {\n              Categories.map(category=> \n                //map does for every member of the list\n                // for every single member of the json file we are \n                //looking for the id and assigning the name of that id\n                  // as the body of the div\n                <div id = {category.id}>\n                    {category.name}\n                </div>\n                  )\n            }\n        </div> );\n  }\n}\n \nexport default Category;\n","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nclass Home extends Component {\n    state = {  }\n    render() { \n        return ( \n            <div>\n                <AppNav/>\n                <h2>HOME</h2>\n            </div>\n        );\n    }\n}\n \nexport default Home;","import React, { Component } from 'react';\nimport AppNav from './AppNav';\nimport DatePicker from 'react-datepicker';\nimport \"react-datepicker/dist/react-datepicker.css\";\nimport \"./App.css\";\nimport {Table,Container,Input,Button,Label,Form,FormGroup} from 'reactstrap';\nimport {Link} from 'react-router-dom';\nimport Moment from 'react-moment';\nclass Expenses extends Component {\n\n\n   emptyItem = {\n        description : '' ,\n        expensedate : new Date(),\n        id:104,\n        location : '',\n        category : {id:1 , name:'Travel'}\n    }\n    constructor(props){\n        super(props)\n  \n        this.state = { \n          isLoading :false,\n          categories:[],\n          Expenses : [],\n          date :new Date(),\n          item : this.emptyItem\n         }\n  \n         this.handleSubmit= this.handleSubmit.bind(this);\n         this.handleChange= this.handleChange.bind(this);\n         this.handleDateChange= this.handleDateChange.bind(this);\n  \n      } \n\n\n    handleChange(event){\n        const target= event.target;\n        const value= target.value;\n        const name = target.name;\n        let item={...this.state.item};\n        item[name] = value;\n        this.setState({item});\n        console.log(item);\n      }\n  \n  \n      handleDateChange(date){\n        let item={...this.state.item};\n        item.expensedate= date;\n        this.setState({item});\n      \n      }\n    \n\n    async handleSubmit(event){\n     \n        const item = this.state.item;\n      \n  \n        await fetch(`/api/expenses`, {\n          method : 'POST',\n          headers : {\n            'Accept': 'application/json',\n            'Content-Type': 'application/json'\n          },\n          body : JSON.stringify(item),\n        });\n        \n        event.preventDefault();\n        this.props.history.push(\"/expenses\");\n      }\n      \n    async remove(id){\n        await fetch(`/api/expenses/${id}` , {\n          method: 'DELETE' ,\n          headers : {\n            'Accept' : 'application/json',\n            'Content-Type' : 'application/json'\n          }\n\n        }).then(() => {\n          let updatedExpenses = [...this.state.Expenses].filter(i => i.id !== id);\n          this.setState({Expenses : updatedExpenses});\n        });\n\n    }\n\n   //event driven programing \n    async componentDidMount(){ // async  means it will update itself we dont have to handle handshake\n        const response = await fetch ('/api/categories');\n        const body = await response.json();// means when we fetch data and its ready i will let you know when its ready\n        this.setState({categories: body, isLoading:false});// always update state wiht setState do no update it direclty\n\n        const responseExp = await fetch('/api/expenses');\n        const bodyExp = await responseExp.json();\n        this.setState({Expenses : bodyExp,isLoading:false})\n\n        \n    }\n\n    \n    render() { \n        const title = <h3>Add Expense</h3>;\n        const {categories} = this.state;\n        const {Expenses,isLoading} = this.state;\n        if (isLoading)\n             return(<div>loading...</div>)\n        let optionList = \n            categories.map(category=>\n            <option id = {category.id}>\n                {category.name}\n            </option>\n            )\n        let rows=\n                Expenses.map( expense =>\n                <tr key={expense.id}>\n                    <td>{expense.description}</td>\n                    <td>{expense.location}</td>\n                    <td><Moment date={expense.expensedate} format=\"YYYY/MM/DD\"/></td>\n                    <td>{expense.category.name}</td>\n                    <td><Button size=\"sm\" color=\"danger\" onClick={() => this.remove(expense.id)}>Delete</Button></td>\n\n                </tr> )\n        return (\n            <div><AppNav/>\n            <Container>\n                {title}\n                <Form onSubmit = {this.handleSubmit}>\n                    <FormGroup>\n                        <Label for=\"description\">Description of Expense</Label>\n                        <Input type = \"description\" name = \"description\" id = \"description\"\n                         onChange={this.handleChange} autoComplete = \"name\"/>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"category\">Category</Label>\n                        <select onChange={this.handleChange}>\n                                {optionList}\n                        </select>\n                    </FormGroup>\n                    <FormGroup>\n                        <Label for=\"city\">Date</Label>\n                        <DatePicker selected={this.state.item.expensedate}  onChange={this.handleDateChange} />\n                    </FormGroup>\n                    <div className = \"row\">\n                        <FormGroup className = \"col-md-4 mb-3\">\n                            <Label for =\"location\">Location</Label>\n                            <Input type=\"text\" name=\"location\" id=\"location\" onChange={this.handleChange}/>\n                        </FormGroup>\n                    </div>\n                    <FormGroup>\n                        <Button color = \"primary\" type = \"submit\">Save</Button>\n                        <Button color = \"secondary\" tag = {Link} to =\"/\">Cancel</Button>\n                    </FormGroup>\n                    \n                </Form>\n            </Container>\n\n            <Container>\n                <h3>Expense List</h3>\n            <Table className = \"mt-4\">\n                <thead>\n                    <tr>\n                        <th width = \"20%\">Description</th>\n                        <th width = \"10%\">Location</th>\n                        <th width >Date</th>\n                        <th width >Category</th>\n                        <th width = \"10%\">Action</th> \n                    </tr>\n                </thead>\n                <tbody>\n                    {rows}\n                </tbody>\n            </Table>\n            </Container>\n\n\n            </div>\n            );\n    }\n}\n \nexport default Expenses;","import React, { Component } from 'react';\nimport Category from './Category';\nimport Home from './Home';\nimport Expenses from './Expenses';\nimport {Route,BrowserRouter as Router,Switch} from 'react-router-dom'\n\nclass App extends Component {\n    state = {  }\n    render() { \n        return (  \n            <Router>\n                <Switch>\n                    <Route path = '/' exact={true} component ={Home}/>\n                    <Route path = '/categories' exact={true} component ={Category}/>\n                    <Route path = '/expenses' exact={true} component ={Expenses}/>\n                </Switch>\n            </Router>\n        );\n    }\n}\n \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.css'; \n\nReactDOM.render(<App/> , document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n "],"sourceRoot":""}